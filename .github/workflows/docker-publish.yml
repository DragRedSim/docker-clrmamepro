name: Build new image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
  schedule:
    - cron: '29 9 * * *'
  push:
    branches: [ "main", "baseimage-update" ]
    # Note that pushes will trigger a workflow, but may not trigger a full rebuild, due to the version variable being checked.
    # Manual runs of the workflow from the Github website will ignore this check, and fully rebuild the image.
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-new-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pipenv'
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - run: pipenv install
      - name: Check for new version of CLRMamePro
        id: get-latest
        run:
          pipenv run python check-clrmamepro.py
    outputs:
      latest-version: ${{ steps.get-latest.outputs.LATEST_VERSION }} 
          
  build:
    needs: check-new-version
    if: ${{ vars.LATEST_BUILT_VERSION != needs.check-new-version.outputs.latest-version || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      #actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.7.0

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}    
            type=raw,value=v4-${{ needs.check-new-version.outputs.latest-version }}
          #in this case, v4 is referencing the v4 version of the baseimage used in the Dockerfile

      - name: Log Docker tags
        run: echo "${{ steps.meta.outputs.tags }}"
        
      - name: Get baseimage version
        id: find_base
        uses: flownative/action-docker-get-label@v1
        with:
          image: jlesage/baseimage-gui:ubuntu-24.04-v4
          label: org.label-schema.version
          registry-username: ${{ secrets.DOCKERHUB_USRNM }}
          registry-password: ${{ secrets.DOCKERHUB_PASSWD }}
          registry-endpoint: https://index.docker.io/v2/
        
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          build-args: |
            CMP_LATEST:${{ needs.check-new-version.outputs.latest-version }}
            BASEIMG_VER:${{ steps.find_base.outputs.value }}]
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          load: ${{ github.event_name == 'pull_request' || github.ref_name != 'main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

      - name: Update last-built information
        uses: action-pack/set-variable@v1
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        with:
          name: 'LATEST_BUILT_VERSION'
          value: ${{ needs.check-new-version.outputs.latest-version }}
          repository: ${{ github.repository }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
